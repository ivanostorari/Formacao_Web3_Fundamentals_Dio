
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    mapping(address => bool) public hasVoted;
    mapping(bytes32 => uint256) public votesReceived;
    address public admin;

    event Voted(address indexed voter, bytes32 indexed candidate);

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    function vote(bytes32 candidate) external {
        require(!hasVoted[msg.sender], "You have already voted");
        votesReceived[candidate]++;
        hasVoted[msg.sender] = true;
        emit Voted(msg.sender, candidate);
    }

    function getVotes(bytes32 candidate) external view returns (uint256) {
        return votesReceived[candidate];
    }

    function changeAdmin(address newAdmin) external onlyAdmin {
        admin = newAdmin;
    }
}

